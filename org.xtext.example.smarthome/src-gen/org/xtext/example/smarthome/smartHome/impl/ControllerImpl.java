/**
 * generated by Xtext 2.38.0
 */
package org.xtext.example.smarthome.smartHome.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.smarthome.smartHome.Controller;
import org.xtext.example.smarthome.smartHome.Room;
import org.xtext.example.smarthome.smartHome.RoomInheritance;
import org.xtext.example.smarthome.smartHome.SmartHomePackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Controller</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.smarthome.smartHome.impl.ControllerImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.example.smarthome.smartHome.impl.ControllerImpl#getRooms <em>Rooms</em>}</li>
 *   <li>{@link org.xtext.example.smarthome.smartHome.impl.ControllerImpl#getRoomInheritance <em>Room Inheritance</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ControllerImpl extends MinimalEObjectImpl.Container implements Controller
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getRooms() <em>Rooms</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRooms()
   * @generated
   * @ordered
   */
  protected EList<Room> rooms;

  /**
   * The cached value of the '{@link #getRoomInheritance() <em>Room Inheritance</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRoomInheritance()
   * @generated
   * @ordered
   */
  protected RoomInheritance roomInheritance;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ControllerImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SmartHomePackage.Literals.CONTROLLER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmartHomePackage.CONTROLLER__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Room> getRooms()
  {
    if (rooms == null)
    {
      rooms = new EObjectContainmentEList<Room>(Room.class, this, SmartHomePackage.CONTROLLER__ROOMS);
    }
    return rooms;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RoomInheritance getRoomInheritance()
  {
    return roomInheritance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRoomInheritance(RoomInheritance newRoomInheritance, NotificationChain msgs)
  {
    RoomInheritance oldRoomInheritance = roomInheritance;
    roomInheritance = newRoomInheritance;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SmartHomePackage.CONTROLLER__ROOM_INHERITANCE, oldRoomInheritance, newRoomInheritance);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRoomInheritance(RoomInheritance newRoomInheritance)
  {
    if (newRoomInheritance != roomInheritance)
    {
      NotificationChain msgs = null;
      if (roomInheritance != null)
        msgs = ((InternalEObject)roomInheritance).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SmartHomePackage.CONTROLLER__ROOM_INHERITANCE, null, msgs);
      if (newRoomInheritance != null)
        msgs = ((InternalEObject)newRoomInheritance).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SmartHomePackage.CONTROLLER__ROOM_INHERITANCE, null, msgs);
      msgs = basicSetRoomInheritance(newRoomInheritance, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmartHomePackage.CONTROLLER__ROOM_INHERITANCE, newRoomInheritance, newRoomInheritance));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SmartHomePackage.CONTROLLER__ROOMS:
        return ((InternalEList<?>)getRooms()).basicRemove(otherEnd, msgs);
      case SmartHomePackage.CONTROLLER__ROOM_INHERITANCE:
        return basicSetRoomInheritance(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SmartHomePackage.CONTROLLER__NAME:
        return getName();
      case SmartHomePackage.CONTROLLER__ROOMS:
        return getRooms();
      case SmartHomePackage.CONTROLLER__ROOM_INHERITANCE:
        return getRoomInheritance();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SmartHomePackage.CONTROLLER__NAME:
        setName((String)newValue);
        return;
      case SmartHomePackage.CONTROLLER__ROOMS:
        getRooms().clear();
        getRooms().addAll((Collection<? extends Room>)newValue);
        return;
      case SmartHomePackage.CONTROLLER__ROOM_INHERITANCE:
        setRoomInheritance((RoomInheritance)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SmartHomePackage.CONTROLLER__NAME:
        setName(NAME_EDEFAULT);
        return;
      case SmartHomePackage.CONTROLLER__ROOMS:
        getRooms().clear();
        return;
      case SmartHomePackage.CONTROLLER__ROOM_INHERITANCE:
        setRoomInheritance((RoomInheritance)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SmartHomePackage.CONTROLLER__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case SmartHomePackage.CONTROLLER__ROOMS:
        return rooms != null && !rooms.isEmpty();
      case SmartHomePackage.CONTROLLER__ROOM_INHERITANCE:
        return roomInheritance != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //ControllerImpl
