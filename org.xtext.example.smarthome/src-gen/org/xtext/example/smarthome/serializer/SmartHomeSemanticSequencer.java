/*
 * generated by Xtext 2.38.0
 */
package org.xtext.example.smarthome.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.smarthome.services.SmartHomeGrammarAccess;
import org.xtext.example.smarthome.smartHome.AND;
import org.xtext.example.smarthome.smartHome.Controller;
import org.xtext.example.smarthome.smartHome.DevProperty;
import org.xtext.example.smarthome.smartHome.Device;
import org.xtext.example.smarthome.smartHome.DeviceInheritance;
import org.xtext.example.smarthome.smartHome.DeviceInheritanceDetails;
import org.xtext.example.smarthome.smartHome.GT;
import org.xtext.example.smarthome.smartHome.LT;
import org.xtext.example.smarthome.smartHome.MyNumber;
import org.xtext.example.smarthome.smartHome.Parenthesis;
import org.xtext.example.smarthome.smartHome.Property;
import org.xtext.example.smarthome.smartHome.PropertyType;
import org.xtext.example.smarthome.smartHome.Room;
import org.xtext.example.smarthome.smartHome.RoomInheritance;
import org.xtext.example.smarthome.smartHome.RoomInheritanceDetails;
import org.xtext.example.smarthome.smartHome.SmartHomePackage;
import org.xtext.example.smarthome.smartHome.Type;
import org.xtext.example.smarthome.smartHome.VarRef;

@SuppressWarnings("all")
public class SmartHomeSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SmartHomeGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SmartHomePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SmartHomePackage.AND:
				sequence_BooleanExp(context, (AND) semanticObject); 
				return; 
			case SmartHomePackage.ACTION:
				sequence_Action(context, (org.xtext.example.smarthome.smartHome.Action) semanticObject); 
				return; 
			case SmartHomePackage.CONTROLLER:
				sequence_Controller(context, (Controller) semanticObject); 
				return; 
			case SmartHomePackage.DEV_PROPERTY:
				sequence_DevProperty(context, (DevProperty) semanticObject); 
				return; 
			case SmartHomePackage.DEVICE:
				sequence_Device(context, (Device) semanticObject); 
				return; 
			case SmartHomePackage.DEVICE_INHERITANCE:
				sequence_DeviceInheritance(context, (DeviceInheritance) semanticObject); 
				return; 
			case SmartHomePackage.DEVICE_INHERITANCE_DETAILS:
				sequence_DeviceInheritanceDetails(context, (DeviceInheritanceDetails) semanticObject); 
				return; 
			case SmartHomePackage.GT:
				sequence_AndCondition(context, (GT) semanticObject); 
				return; 
			case SmartHomePackage.LT:
				sequence_AndCondition(context, (LT) semanticObject); 
				return; 
			case SmartHomePackage.MY_NUMBER:
				sequence_Atomic(context, (MyNumber) semanticObject); 
				return; 
			case SmartHomePackage.PARENTHESIS:
				sequence_Atomic(context, (Parenthesis) semanticObject); 
				return; 
			case SmartHomePackage.PROPERTY:
				sequence_Property(context, (Property) semanticObject); 
				return; 
			case SmartHomePackage.PROPERTY_TYPE:
				sequence_PropertyType(context, (PropertyType) semanticObject); 
				return; 
			case SmartHomePackage.ROOM:
				sequence_Room(context, (Room) semanticObject); 
				return; 
			case SmartHomePackage.ROOM_INHERITANCE:
				sequence_RoomInheritance(context, (RoomInheritance) semanticObject); 
				return; 
			case SmartHomePackage.ROOM_INHERITANCE_DETAILS:
				sequence_RoomInheritanceDetails(context, (RoomInheritanceDetails) semanticObject); 
				return; 
			case SmartHomePackage.TYPE:
				sequence_Type(context, (Type) semanticObject); 
				return; 
			case SmartHomePackage.VAR_REF:
				sequence_Atomic(context, (VarRef) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Action returns Action
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_Action(ISerializationContext context, org.xtext.example.smarthome.smartHome.Action semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmartHomePackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartHomePackage.Literals.ACTION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getActionAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Exp returns GT
	 *     BooleanExp returns GT
	 *     BooleanExp.AND_1_0 returns GT
	 *     AndCondition returns GT
	 *     AndCondition.GT_1_0_0 returns GT
	 *     AndCondition.LT_1_1_0 returns GT
	 *     Parenthesis returns GT
	 *
	 * Constraint:
	 *     (left=AndCondition_GT_1_0_0 right=Atomic)
	 * </pre>
	 */
	protected void sequence_AndCondition(ISerializationContext context, GT semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmartHomePackage.Literals.GT__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartHomePackage.Literals.GT__LEFT));
			if (transientValues.isValueTransient(semanticObject, SmartHomePackage.Literals.GT__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartHomePackage.Literals.GT__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAndConditionAccess().getGTLeftAction_1_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getAndConditionAccess().getRightAtomicParserRuleCall_1_0_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Exp returns LT
	 *     BooleanExp returns LT
	 *     BooleanExp.AND_1_0 returns LT
	 *     AndCondition returns LT
	 *     AndCondition.GT_1_0_0 returns LT
	 *     AndCondition.LT_1_1_0 returns LT
	 *     Parenthesis returns LT
	 *
	 * Constraint:
	 *     (left=AndCondition_LT_1_1_0 right=Atomic)
	 * </pre>
	 */
	protected void sequence_AndCondition(ISerializationContext context, LT semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmartHomePackage.Literals.LT__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartHomePackage.Literals.LT__LEFT));
			if (transientValues.isValueTransient(semanticObject, SmartHomePackage.Literals.LT__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartHomePackage.Literals.LT__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAndConditionAccess().getLTLeftAction_1_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getAndConditionAccess().getRightAtomicParserRuleCall_1_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Exp returns MyNumber
	 *     BooleanExp returns MyNumber
	 *     BooleanExp.AND_1_0 returns MyNumber
	 *     AndCondition returns MyNumber
	 *     AndCondition.GT_1_0_0 returns MyNumber
	 *     AndCondition.LT_1_1_0 returns MyNumber
	 *     Atomic returns MyNumber
	 *     Parenthesis returns MyNumber
	 *
	 * Constraint:
	 *     value=INT
	 * </pre>
	 */
	protected void sequence_Atomic(ISerializationContext context, MyNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmartHomePackage.Literals.MY_NUMBER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartHomePackage.Literals.MY_NUMBER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtomicAccess().getValueINTTerminalRuleCall_0_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Exp returns Parenthesis
	 *     BooleanExp returns Parenthesis
	 *     BooleanExp.AND_1_0 returns Parenthesis
	 *     AndCondition returns Parenthesis
	 *     AndCondition.GT_1_0_0 returns Parenthesis
	 *     AndCondition.LT_1_1_0 returns Parenthesis
	 *     Atomic returns Parenthesis
	 *     Parenthesis returns Parenthesis
	 *
	 * Constraint:
	 *     value=Parenthesis
	 * </pre>
	 */
	protected void sequence_Atomic(ISerializationContext context, Parenthesis semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmartHomePackage.Literals.PARENTHESIS__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartHomePackage.Literals.PARENTHESIS__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtomicAccess().getValueParenthesisParserRuleCall_2_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Exp returns VarRef
	 *     BooleanExp returns VarRef
	 *     BooleanExp.AND_1_0 returns VarRef
	 *     AndCondition returns VarRef
	 *     AndCondition.GT_1_0_0 returns VarRef
	 *     AndCondition.LT_1_1_0 returns VarRef
	 *     Atomic returns VarRef
	 *     Parenthesis returns VarRef
	 *
	 * Constraint:
	 *     value=[Property|ID]
	 * </pre>
	 */
	protected void sequence_Atomic(ISerializationContext context, VarRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmartHomePackage.Literals.VAR_REF__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartHomePackage.Literals.VAR_REF__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtomicAccess().getValuePropertyIDTerminalRuleCall_1_1_0_1(), semanticObject.eGet(SmartHomePackage.Literals.VAR_REF__VALUE, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Exp returns AND
	 *     BooleanExp returns AND
	 *     BooleanExp.AND_1_0 returns AND
	 *     Parenthesis returns AND
	 *
	 * Constraint:
	 *     (left=BooleanExp_AND_1_0 right=AndCondition)
	 * </pre>
	 */
	protected void sequence_BooleanExp(ISerializationContext context, AND semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmartHomePackage.Literals.AND__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartHomePackage.Literals.AND__LEFT));
			if (transientValues.isValueTransient(semanticObject, SmartHomePackage.Literals.AND__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartHomePackage.Literals.AND__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBooleanExpAccess().getANDLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getBooleanExpAccess().getRightAndConditionParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Controller returns Controller
	 *
	 * Constraint:
	 *     (name=ID rooms+=Room* roomInheritance=RoomInheritance?)
	 * </pre>
	 */
	protected void sequence_Controller(ISerializationContext context, Controller semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DevProperty returns DevProperty
	 *
	 * Constraint:
	 *     (name=ID type=Type)
	 * </pre>
	 */
	protected void sequence_DevProperty(ISerializationContext context, DevProperty semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmartHomePackage.Literals.DEV_PROPERTY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartHomePackage.Literals.DEV_PROPERTY__NAME));
			if (transientValues.isValueTransient(semanticObject, SmartHomePackage.Literals.DEV_PROPERTY__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartHomePackage.Literals.DEV_PROPERTY__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDevPropertyAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDevPropertyAccess().getTypeTypeParserRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DeviceInheritanceDetails returns DeviceInheritanceDetails
	 *
	 * Constraint:
	 *     (deviceChild=[Device|ID] deviceParent=[Device|ID])
	 * </pre>
	 */
	protected void sequence_DeviceInheritanceDetails(ISerializationContext context, DeviceInheritanceDetails semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmartHomePackage.Literals.DEVICE_INHERITANCE_DETAILS__DEVICE_CHILD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartHomePackage.Literals.DEVICE_INHERITANCE_DETAILS__DEVICE_CHILD));
			if (transientValues.isValueTransient(semanticObject, SmartHomePackage.Literals.DEVICE_INHERITANCE_DETAILS__DEVICE_PARENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartHomePackage.Literals.DEVICE_INHERITANCE_DETAILS__DEVICE_PARENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDeviceInheritanceDetailsAccess().getDeviceChildDeviceIDTerminalRuleCall_0_0_1(), semanticObject.eGet(SmartHomePackage.Literals.DEVICE_INHERITANCE_DETAILS__DEVICE_CHILD, false));
		feeder.accept(grammarAccess.getDeviceInheritanceDetailsAccess().getDeviceParentDeviceIDTerminalRuleCall_3_0_1(), semanticObject.eGet(SmartHomePackage.Literals.DEVICE_INHERITANCE_DETAILS__DEVICE_PARENT, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DeviceInheritance returns DeviceInheritance
	 *
	 * Constraint:
	 *     inheritances+=DeviceInheritanceDetails+
	 * </pre>
	 */
	protected void sequence_DeviceInheritance(ISerializationContext context, DeviceInheritance semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Device returns Device
	 *
	 * Constraint:
	 *     (name=ID properties+=Property* actions+=Action* exp+=Exp*)
	 * </pre>
	 */
	protected void sequence_Device(ISerializationContext context, Device semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PropertyType returns PropertyType
	 *
	 * Constraint:
	 *     (name='private' | name='public')
	 * </pre>
	 */
	protected void sequence_PropertyType(ISerializationContext context, PropertyType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Property returns Property
	 *
	 * Constraint:
	 *     (prType=PropertyType? name=ID type=Type)
	 * </pre>
	 */
	protected void sequence_Property(ISerializationContext context, Property semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RoomInheritanceDetails returns RoomInheritanceDetails
	 *
	 * Constraint:
	 *     (roomChild=[Room|ID] roomParent=[Room|ID])
	 * </pre>
	 */
	protected void sequence_RoomInheritanceDetails(ISerializationContext context, RoomInheritanceDetails semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmartHomePackage.Literals.ROOM_INHERITANCE_DETAILS__ROOM_CHILD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartHomePackage.Literals.ROOM_INHERITANCE_DETAILS__ROOM_CHILD));
			if (transientValues.isValueTransient(semanticObject, SmartHomePackage.Literals.ROOM_INHERITANCE_DETAILS__ROOM_PARENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartHomePackage.Literals.ROOM_INHERITANCE_DETAILS__ROOM_PARENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRoomInheritanceDetailsAccess().getRoomChildRoomIDTerminalRuleCall_0_0_1(), semanticObject.eGet(SmartHomePackage.Literals.ROOM_INHERITANCE_DETAILS__ROOM_CHILD, false));
		feeder.accept(grammarAccess.getRoomInheritanceDetailsAccess().getRoomParentRoomIDTerminalRuleCall_3_0_1(), semanticObject.eGet(SmartHomePackage.Literals.ROOM_INHERITANCE_DETAILS__ROOM_PARENT, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RoomInheritance returns RoomInheritance
	 *
	 * Constraint:
	 *     inheritances+=RoomInheritanceDetails+
	 * </pre>
	 */
	protected void sequence_RoomInheritance(ISerializationContext context, RoomInheritance semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Room returns Room
	 *
	 * Constraint:
	 *     (name=ID properties+=Property* devices+=Device* deviceInheritance=DeviceInheritance?)
	 * </pre>
	 */
	protected void sequence_Room(ISerializationContext context, Room semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Type returns Type
	 *
	 * Constraint:
	 *     (name='bool' | name='integer' | name='double' | name='string')
	 * </pre>
	 */
	protected void sequence_Type(ISerializationContext context, Type semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
