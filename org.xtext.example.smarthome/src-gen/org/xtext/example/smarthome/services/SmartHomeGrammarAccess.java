/*
 * generated by Xtext 2.38.0
 */
package org.xtext.example.smarthome.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SmartHomeGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ControllerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.smarthome.SmartHome.Controller");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSmartHomeControllerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRoomsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRoomsRoomParserRuleCall_3_0 = (RuleCall)cRoomsAssignment_3.eContents().get(0);
		private final Assignment cRoomInheritanceAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRoomInheritanceRoomInheritanceParserRuleCall_4_0 = (RuleCall)cRoomInheritanceAssignment_4.eContents().get(0);
		
		///*
		// * EBNF
		// *
		//Controller-> ‘SmartHomeController’ ID Room*
		//Room →  ‘Room’ ID ‘where properties:’ Property*  Device*
		//Device→ ‘Device’ ID ‘where properties:’ Property*  (Action)*
		//Action → ‘Action:’ ID*
		//Property –>   ID ':' Type (‘constraint’ exp)?
		//exp→  exp AND exp | exp > exp | exp < exp
		//Type →  BOOL | INTEGER | DOUBLE | STRING
		// *
		// */
		//Controller:
		//    'SmartHomeController' name=ID ':' rooms+=Room* roomInheritance=RoomInheritance?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'SmartHomeController' name=ID ':' rooms+=Room* roomInheritance=RoomInheritance?
		public Group getGroup() { return cGroup; }
		
		//'SmartHomeController'
		public Keyword getSmartHomeControllerKeyword_0() { return cSmartHomeControllerKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//rooms+=Room*
		public Assignment getRoomsAssignment_3() { return cRoomsAssignment_3; }
		
		//Room
		public RuleCall getRoomsRoomParserRuleCall_3_0() { return cRoomsRoomParserRuleCall_3_0; }
		
		//roomInheritance=RoomInheritance?
		public Assignment getRoomInheritanceAssignment_4() { return cRoomInheritanceAssignment_4; }
		
		//RoomInheritance
		public RuleCall getRoomInheritanceRoomInheritanceParserRuleCall_4_0() { return cRoomInheritanceRoomInheritanceParserRuleCall_4_0; }
	}
	public class RoomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.smarthome.SmartHome.Room");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRoomKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cWhereKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cPropertiesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPropertiesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPropertiesPropertyParserRuleCall_4_0 = (RuleCall)cPropertiesAssignment_4.eContents().get(0);
		private final Assignment cDevicesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDevicesDeviceParserRuleCall_5_0 = (RuleCall)cDevicesAssignment_5.eContents().get(0);
		private final Assignment cDeviceInheritanceAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDeviceInheritanceDeviceInheritanceParserRuleCall_6_0 = (RuleCall)cDeviceInheritanceAssignment_6.eContents().get(0);
		
		//Room:
		//    'Room' name=ID 'where' 'properties:' properties+=Property* (devices+=Device)* deviceInheritance=DeviceInheritance?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Room' name=ID 'where' 'properties:' properties+=Property* (devices+=Device)* deviceInheritance=DeviceInheritance?
		public Group getGroup() { return cGroup; }
		
		//'Room'
		public Keyword getRoomKeyword_0() { return cRoomKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'where'
		public Keyword getWhereKeyword_2() { return cWhereKeyword_2; }
		
		//'properties:'
		public Keyword getPropertiesKeyword_3() { return cPropertiesKeyword_3; }
		
		//properties+=Property*
		public Assignment getPropertiesAssignment_4() { return cPropertiesAssignment_4; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_4_0() { return cPropertiesPropertyParserRuleCall_4_0; }
		
		//(devices+=Device)*
		public Assignment getDevicesAssignment_5() { return cDevicesAssignment_5; }
		
		//Device
		public RuleCall getDevicesDeviceParserRuleCall_5_0() { return cDevicesDeviceParserRuleCall_5_0; }
		
		//deviceInheritance=DeviceInheritance?
		public Assignment getDeviceInheritanceAssignment_6() { return cDeviceInheritanceAssignment_6; }
		
		//DeviceInheritance
		public RuleCall getDeviceInheritanceDeviceInheritanceParserRuleCall_6_0() { return cDeviceInheritanceDeviceInheritanceParserRuleCall_6_0; }
	}
	public class RoomInheritanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.smarthome.SmartHome.RoomInheritance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRoomKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cInheritanceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInheritancesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInheritancesRoomInheritanceDetailsParserRuleCall_2_0 = (RuleCall)cInheritancesAssignment_2.eContents().get(0);
		
		//RoomInheritance:
		//    'room' 'inheritance:' (inheritances+=RoomInheritanceDetails*)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'room' 'inheritance:' (inheritances+=RoomInheritanceDetails*)?
		public Group getGroup() { return cGroup; }
		
		//'room'
		public Keyword getRoomKeyword_0() { return cRoomKeyword_0; }
		
		//'inheritance:'
		public Keyword getInheritanceKeyword_1() { return cInheritanceKeyword_1; }
		
		//(inheritances+=RoomInheritanceDetails*)?
		public Assignment getInheritancesAssignment_2() { return cInheritancesAssignment_2; }
		
		//RoomInheritanceDetails
		public RuleCall getInheritancesRoomInheritanceDetailsParserRuleCall_2_0() { return cInheritancesRoomInheritanceDetailsParserRuleCall_2_0; }
	}
	public class RoomInheritanceDetailsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.smarthome.SmartHome.RoomInheritanceDetails");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRoomChildAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRoomChildRoomCrossReference_0_0 = (CrossReference)cRoomChildAssignment_0.eContents().get(0);
		private final RuleCall cRoomChildRoomIDTerminalRuleCall_0_0_1 = (RuleCall)cRoomChildRoomCrossReference_0_0.eContents().get(1);
		private final Keyword cExtendsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRoomParentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRoomParentRoomCrossReference_3_0 = (CrossReference)cRoomParentAssignment_3.eContents().get(0);
		private final RuleCall cRoomParentRoomIDTerminalRuleCall_3_0_1 = (RuleCall)cRoomParentRoomCrossReference_3_0.eContents().get(1);
		
		//RoomInheritanceDetails:
		//    roomChild=[Room] 'extends' 'from' roomParent=[Room]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//roomChild=[Room] 'extends' 'from' roomParent=[Room]
		public Group getGroup() { return cGroup; }
		
		//roomChild=[Room]
		public Assignment getRoomChildAssignment_0() { return cRoomChildAssignment_0; }
		
		//[Room]
		public CrossReference getRoomChildRoomCrossReference_0_0() { return cRoomChildRoomCrossReference_0_0; }
		
		//ID
		public RuleCall getRoomChildRoomIDTerminalRuleCall_0_0_1() { return cRoomChildRoomIDTerminalRuleCall_0_0_1; }
		
		//'extends'
		public Keyword getExtendsKeyword_1() { return cExtendsKeyword_1; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//roomParent=[Room]
		public Assignment getRoomParentAssignment_3() { return cRoomParentAssignment_3; }
		
		//[Room]
		public CrossReference getRoomParentRoomCrossReference_3_0() { return cRoomParentRoomCrossReference_3_0; }
		
		//ID
		public RuleCall getRoomParentRoomIDTerminalRuleCall_3_0_1() { return cRoomParentRoomIDTerminalRuleCall_3_0_1; }
	}
	public class DeviceInheritanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.smarthome.SmartHome.DeviceInheritance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeviceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cInheritanceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInheritancesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInheritancesDeviceInheritanceDetailsParserRuleCall_2_0 = (RuleCall)cInheritancesAssignment_2.eContents().get(0);
		
		//DeviceInheritance:
		//    'device' 'inheritance:' (inheritances+=DeviceInheritanceDetails*)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'device' 'inheritance:' (inheritances+=DeviceInheritanceDetails*)?
		public Group getGroup() { return cGroup; }
		
		//'device'
		public Keyword getDeviceKeyword_0() { return cDeviceKeyword_0; }
		
		//'inheritance:'
		public Keyword getInheritanceKeyword_1() { return cInheritanceKeyword_1; }
		
		//(inheritances+=DeviceInheritanceDetails*)?
		public Assignment getInheritancesAssignment_2() { return cInheritancesAssignment_2; }
		
		//DeviceInheritanceDetails
		public RuleCall getInheritancesDeviceInheritanceDetailsParserRuleCall_2_0() { return cInheritancesDeviceInheritanceDetailsParserRuleCall_2_0; }
	}
	public class DeviceInheritanceDetailsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.smarthome.SmartHome.DeviceInheritanceDetails");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeviceChildAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cDeviceChildDeviceCrossReference_0_0 = (CrossReference)cDeviceChildAssignment_0.eContents().get(0);
		private final RuleCall cDeviceChildDeviceIDTerminalRuleCall_0_0_1 = (RuleCall)cDeviceChildDeviceCrossReference_0_0.eContents().get(1);
		private final Keyword cExtendsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDeviceParentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cDeviceParentDeviceCrossReference_3_0 = (CrossReference)cDeviceParentAssignment_3.eContents().get(0);
		private final RuleCall cDeviceParentDeviceIDTerminalRuleCall_3_0_1 = (RuleCall)cDeviceParentDeviceCrossReference_3_0.eContents().get(1);
		
		//DeviceInheritanceDetails:
		//    deviceChild=[Device] 'extends' 'from' deviceParent=[Device]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//deviceChild=[Device] 'extends' 'from' deviceParent=[Device]
		public Group getGroup() { return cGroup; }
		
		//deviceChild=[Device]
		public Assignment getDeviceChildAssignment_0() { return cDeviceChildAssignment_0; }
		
		//[Device]
		public CrossReference getDeviceChildDeviceCrossReference_0_0() { return cDeviceChildDeviceCrossReference_0_0; }
		
		//ID
		public RuleCall getDeviceChildDeviceIDTerminalRuleCall_0_0_1() { return cDeviceChildDeviceIDTerminalRuleCall_0_0_1; }
		
		//'extends'
		public Keyword getExtendsKeyword_1() { return cExtendsKeyword_1; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//deviceParent=[Device]
		public Assignment getDeviceParentAssignment_3() { return cDeviceParentAssignment_3; }
		
		//[Device]
		public CrossReference getDeviceParentDeviceCrossReference_3_0() { return cDeviceParentDeviceCrossReference_3_0; }
		
		//ID
		public RuleCall getDeviceParentDeviceIDTerminalRuleCall_3_0_1() { return cDeviceParentDeviceIDTerminalRuleCall_3_0_1; }
	}
	public class DeviceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.smarthome.SmartHome.Device");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeviceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cWhereKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cPropertiesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPropertiesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPropertiesPropertyParserRuleCall_4_0 = (RuleCall)cPropertiesAssignment_4.eContents().get(0);
		private final Keyword cActionsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cActionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cActionsActionParserRuleCall_6_0 = (RuleCall)cActionsAssignment_6.eContents().get(0);
		private final Keyword cConstraintsKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cExpAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cExpExpParserRuleCall_8_0 = (RuleCall)cExpAssignment_8.eContents().get(0);
		
		//Device:
		//    'Device' name=ID 'where' 'properties:' properties+=Property* ('Actions:')?( actions+=Action)* ('constraints:')? (exp+=Exp)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Device' name=ID 'where' 'properties:' properties+=Property* ('Actions:')?( actions+=Action)* ('constraints:')? (exp+=Exp)*
		public Group getGroup() { return cGroup; }
		
		//'Device'
		public Keyword getDeviceKeyword_0() { return cDeviceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'where'
		public Keyword getWhereKeyword_2() { return cWhereKeyword_2; }
		
		//'properties:'
		public Keyword getPropertiesKeyword_3() { return cPropertiesKeyword_3; }
		
		//properties+=Property*
		public Assignment getPropertiesAssignment_4() { return cPropertiesAssignment_4; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_4_0() { return cPropertiesPropertyParserRuleCall_4_0; }
		
		//('Actions:')?
		public Keyword getActionsKeyword_5() { return cActionsKeyword_5; }
		
		//( actions+=Action)*
		public Assignment getActionsAssignment_6() { return cActionsAssignment_6; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_6_0() { return cActionsActionParserRuleCall_6_0; }
		
		//('constraints:')?
		public Keyword getConstraintsKeyword_7() { return cConstraintsKeyword_7; }
		
		//(exp+=Exp)*
		public Assignment getExpAssignment_8() { return cExpAssignment_8; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_8_0() { return cExpExpParserRuleCall_8_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.smarthome.SmartHome.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Action:
		//    'do' name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'do' name=ID
		public Group getGroup() { return cGroup; }
		
		//'do'
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.smarthome.SmartHome.Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPrTypePropertyTypeParserRuleCall_0_0 = (RuleCall)cPrTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//Property:
		//    (prType = PropertyType)? name=ID ':' type=Type
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(prType = PropertyType)? name=ID ':' type=Type
		public Group getGroup() { return cGroup; }
		
		//(prType = PropertyType)?
		public Assignment getPrTypeAssignment_0() { return cPrTypeAssignment_0; }
		
		//PropertyType
		public RuleCall getPrTypePropertyTypeParserRuleCall_0_0() { return cPrTypePropertyTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=Type
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_3_0() { return cTypeTypeParserRuleCall_3_0; }
	}
	public class DevPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.smarthome.SmartHome.DevProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//DevProperty:
		//    name=ID ':' type=Type
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=Type
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}
	public class ExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.smarthome.SmartHome.Exp");
		private final RuleCall cBooleanExpParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////Exp returns Expressin:
		////    Plus(
		////        {Plus.left=current} '+' right=Plus
		////    )*
		////;
		////Plus returns Expression:
		////    {MyNumber} value = INT |
		////    {VarRef} value = ID
		////;
		////
		//Exp returns Expression: BooleanExp;
		@Override public ParserRule getRule() { return rule; }
		
		//BooleanExp
		public RuleCall getBooleanExpParserRuleCall() { return cBooleanExpParserRuleCall; }
	}
	public class BooleanExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.smarthome.SmartHome.BooleanExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndConditionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cANDLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cANDKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndConditionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BooleanExp returns Expression:
		//    AndCondition (
		//        {AND.left=current} 'AND' right=AndCondition
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//AndCondition (
		//    {AND.left=current} 'AND' right=AndCondition
		//)*
		public Group getGroup() { return cGroup; }
		
		//AndCondition
		public RuleCall getAndConditionParserRuleCall_0() { return cAndConditionParserRuleCall_0; }
		
		//(
		//       {AND.left=current} 'AND' right=AndCondition
		//   )*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AND.left=current}
		public Action getANDLeftAction_1_0() { return cANDLeftAction_1_0; }
		
		//'AND'
		public Keyword getANDKeyword_1_1() { return cANDKeyword_1_1; }
		
		//right=AndCondition
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AndCondition
		public RuleCall getRightAndConditionParserRuleCall_1_2_0() { return cRightAndConditionParserRuleCall_1_2_0; }
	}
	public class AndConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.smarthome.SmartHome.AndCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAtomicParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cGTLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightAtomicParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cLTLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightAtomicParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//AndCondition returns Expression:
		//    Atomic (
		//        {GT.left=current} '>' right=Atomic |
		//        {LT.left=current} '<' right=Atomic
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Atomic (
		//    {GT.left=current} '>' right=Atomic |
		//    {LT.left=current} '<' right=Atomic
		//)*
		public Group getGroup() { return cGroup; }
		
		//Atomic
		public RuleCall getAtomicParserRuleCall_0() { return cAtomicParserRuleCall_0; }
		
		//(
		//       {GT.left=current} '>' right=Atomic |
		//       {LT.left=current} '<' right=Atomic
		//   )*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{GT.left=current} '>' right=Atomic
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{GT.left=current}
		public Action getGTLeftAction_1_0_0() { return cGTLeftAction_1_0_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_0_1() { return cGreaterThanSignKeyword_1_0_1; }
		
		//right=Atomic
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//Atomic
		public RuleCall getRightAtomicParserRuleCall_1_0_2_0() { return cRightAtomicParserRuleCall_1_0_2_0; }
		
		//{LT.left=current} '<' right=Atomic
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{LT.left=current}
		public Action getLTLeftAction_1_1_0() { return cLTLeftAction_1_1_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_1_1() { return cLessThanSignKeyword_1_1_1; }
		
		//right=Atomic
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//Atomic
		public RuleCall getRightAtomicParserRuleCall_1_1_2_0() { return cRightAtomicParserRuleCall_1_1_2_0; }
	}
	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.smarthome.SmartHome.Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cMyNumberAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cVarRefAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cValuePropertyCrossReference_1_1_0 = (CrossReference)cValueAssignment_1_1.eContents().get(0);
		private final RuleCall cValuePropertyIDTerminalRuleCall_1_1_0_1 = (RuleCall)cValuePropertyCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cParenthesisAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueParenthesisParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		
		//Atomic returns Expression:
		//    {MyNumber} value = INT |
		//    {VarRef} value = [Property] |
		//    {Parenthesis} value = Parenthesis
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{MyNumber} value = INT |
		//{VarRef} value = [Property] |
		//{Parenthesis} value = Parenthesis
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{MyNumber} value = INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{MyNumber}
		public Action getMyNumberAction_0_0() { return cMyNumberAction_0_0; }
		
		//value = INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }
		
		//{VarRef} value = [Property]
		public Group getGroup_1() { return cGroup_1; }
		
		//{VarRef}
		public Action getVarRefAction_1_0() { return cVarRefAction_1_0; }
		
		//value = [Property]
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//[Property]
		public CrossReference getValuePropertyCrossReference_1_1_0() { return cValuePropertyCrossReference_1_1_0; }
		
		//ID
		public RuleCall getValuePropertyIDTerminalRuleCall_1_1_0_1() { return cValuePropertyIDTerminalRuleCall_1_1_0_1; }
		
		//{Parenthesis} value = Parenthesis
		public Group getGroup_2() { return cGroup_2; }
		
		//{Parenthesis}
		public Action getParenthesisAction_2_0() { return cParenthesisAction_2_0; }
		
		//value = Parenthesis
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//Parenthesis
		public RuleCall getValueParenthesisParserRuleCall_2_1_0() { return cValueParenthesisParserRuleCall_2_1_0; }
	}
	public class ParenthesisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.smarthome.SmartHome.Parenthesis");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Parenthesis returns Expression:
		//    "(" Exp ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"(" Exp ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//Exp
		public RuleCall getExpParserRuleCall_1() { return cExpParserRuleCall_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.smarthome.SmartHome.Type");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final Keyword cNameBoolKeyword_0_0 = (Keyword)cNameAlternatives_0.eContents().get(0);
		private final Keyword cNameIntegerKeyword_0_1 = (Keyword)cNameAlternatives_0.eContents().get(1);
		private final Keyword cNameDoubleKeyword_0_2 = (Keyword)cNameAlternatives_0.eContents().get(2);
		private final Keyword cNameStringKeyword_0_3 = (Keyword)cNameAlternatives_0.eContents().get(3);
		
		//Type:
		//    name=("bool" | "integer" | "double" | "string")
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=("bool" | "integer" | "double" | "string")
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//("bool" | "integer" | "double" | "string")
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }
		
		//"bool"
		public Keyword getNameBoolKeyword_0_0() { return cNameBoolKeyword_0_0; }
		
		//"integer"
		public Keyword getNameIntegerKeyword_0_1() { return cNameIntegerKeyword_0_1; }
		
		//"double"
		public Keyword getNameDoubleKeyword_0_2() { return cNameDoubleKeyword_0_2; }
		
		//"string"
		public Keyword getNameStringKeyword_0_3() { return cNameStringKeyword_0_3; }
	}
	public class PropertyTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.smarthome.SmartHome.PropertyType");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final Keyword cNamePrivateKeyword_0_0 = (Keyword)cNameAlternatives_0.eContents().get(0);
		private final Keyword cNamePublicKeyword_0_1 = (Keyword)cNameAlternatives_0.eContents().get(1);
		
		//PropertyType:
		//    name=("private" | "public")
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=("private" | "public")
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//("private" | "public")
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }
		
		//"private"
		public Keyword getNamePrivateKeyword_0_0() { return cNamePrivateKeyword_0_0; }
		
		//"public"
		public Keyword getNamePublicKeyword_0_1() { return cNamePublicKeyword_0_1; }
	}
	
	
	private final ControllerElements pController;
	private final RoomElements pRoom;
	private final RoomInheritanceElements pRoomInheritance;
	private final RoomInheritanceDetailsElements pRoomInheritanceDetails;
	private final DeviceInheritanceElements pDeviceInheritance;
	private final DeviceInheritanceDetailsElements pDeviceInheritanceDetails;
	private final DeviceElements pDevice;
	private final ActionElements pAction;
	private final PropertyElements pProperty;
	private final DevPropertyElements pDevProperty;
	private final ExpElements pExp;
	private final BooleanExpElements pBooleanExp;
	private final AndConditionElements pAndCondition;
	private final AtomicElements pAtomic;
	private final ParenthesisElements pParenthesis;
	private final TypeElements pType;
	private final PropertyTypeElements pPropertyType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SmartHomeGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pController = new ControllerElements();
		this.pRoom = new RoomElements();
		this.pRoomInheritance = new RoomInheritanceElements();
		this.pRoomInheritanceDetails = new RoomInheritanceDetailsElements();
		this.pDeviceInheritance = new DeviceInheritanceElements();
		this.pDeviceInheritanceDetails = new DeviceInheritanceDetailsElements();
		this.pDevice = new DeviceElements();
		this.pAction = new ActionElements();
		this.pProperty = new PropertyElements();
		this.pDevProperty = new DevPropertyElements();
		this.pExp = new ExpElements();
		this.pBooleanExp = new BooleanExpElements();
		this.pAndCondition = new AndConditionElements();
		this.pAtomic = new AtomicElements();
		this.pParenthesis = new ParenthesisElements();
		this.pType = new TypeElements();
		this.pPropertyType = new PropertyTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.smarthome.SmartHome".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///*
	// * EBNF
	// *
	//Controller-> ‘SmartHomeController’ ID Room*
	//Room →  ‘Room’ ID ‘where properties:’ Property*  Device*
	//Device→ ‘Device’ ID ‘where properties:’ Property*  (Action)*
	//Action → ‘Action:’ ID*
	//Property –>   ID ':' Type (‘constraint’ exp)?
	//exp→  exp AND exp | exp > exp | exp < exp
	//Type →  BOOL | INTEGER | DOUBLE | STRING
	// *
	// */
	//Controller:
	//    'SmartHomeController' name=ID ':' rooms+=Room* roomInheritance=RoomInheritance?
	//;
	public ControllerElements getControllerAccess() {
		return pController;
	}
	
	public ParserRule getControllerRule() {
		return getControllerAccess().getRule();
	}
	
	//Room:
	//    'Room' name=ID 'where' 'properties:' properties+=Property* (devices+=Device)* deviceInheritance=DeviceInheritance?
	//;
	public RoomElements getRoomAccess() {
		return pRoom;
	}
	
	public ParserRule getRoomRule() {
		return getRoomAccess().getRule();
	}
	
	//RoomInheritance:
	//    'room' 'inheritance:' (inheritances+=RoomInheritanceDetails*)?
	//;
	public RoomInheritanceElements getRoomInheritanceAccess() {
		return pRoomInheritance;
	}
	
	public ParserRule getRoomInheritanceRule() {
		return getRoomInheritanceAccess().getRule();
	}
	
	//RoomInheritanceDetails:
	//    roomChild=[Room] 'extends' 'from' roomParent=[Room]
	//;
	public RoomInheritanceDetailsElements getRoomInheritanceDetailsAccess() {
		return pRoomInheritanceDetails;
	}
	
	public ParserRule getRoomInheritanceDetailsRule() {
		return getRoomInheritanceDetailsAccess().getRule();
	}
	
	//DeviceInheritance:
	//    'device' 'inheritance:' (inheritances+=DeviceInheritanceDetails*)?
	//;
	public DeviceInheritanceElements getDeviceInheritanceAccess() {
		return pDeviceInheritance;
	}
	
	public ParserRule getDeviceInheritanceRule() {
		return getDeviceInheritanceAccess().getRule();
	}
	
	//DeviceInheritanceDetails:
	//    deviceChild=[Device] 'extends' 'from' deviceParent=[Device]
	//;
	public DeviceInheritanceDetailsElements getDeviceInheritanceDetailsAccess() {
		return pDeviceInheritanceDetails;
	}
	
	public ParserRule getDeviceInheritanceDetailsRule() {
		return getDeviceInheritanceDetailsAccess().getRule();
	}
	
	//Device:
	//    'Device' name=ID 'where' 'properties:' properties+=Property* ('Actions:')?( actions+=Action)* ('constraints:')? (exp+=Exp)*
	//;
	public DeviceElements getDeviceAccess() {
		return pDevice;
	}
	
	public ParserRule getDeviceRule() {
		return getDeviceAccess().getRule();
	}
	
	//Action:
	//    'do' name=ID
	//;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//Property:
	//    (prType = PropertyType)? name=ID ':' type=Type
	//    ;
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	//DevProperty:
	//    name=ID ':' type=Type
	//;
	public DevPropertyElements getDevPropertyAccess() {
		return pDevProperty;
	}
	
	public ParserRule getDevPropertyRule() {
		return getDevPropertyAccess().getRule();
	}
	
	////Exp returns Expressin:
	////    Plus(
	////        {Plus.left=current} '+' right=Plus
	////    )*
	////;
	////Plus returns Expression:
	////    {MyNumber} value = INT |
	////    {VarRef} value = ID
	////;
	////
	//Exp returns Expression: BooleanExp;
	public ExpElements getExpAccess() {
		return pExp;
	}
	
	public ParserRule getExpRule() {
		return getExpAccess().getRule();
	}
	
	//BooleanExp returns Expression:
	//    AndCondition (
	//        {AND.left=current} 'AND' right=AndCondition
	//    )*
	//;
	public BooleanExpElements getBooleanExpAccess() {
		return pBooleanExp;
	}
	
	public ParserRule getBooleanExpRule() {
		return getBooleanExpAccess().getRule();
	}
	
	//AndCondition returns Expression:
	//    Atomic (
	//        {GT.left=current} '>' right=Atomic |
	//        {LT.left=current} '<' right=Atomic
	//    )*
	//;
	public AndConditionElements getAndConditionAccess() {
		return pAndCondition;
	}
	
	public ParserRule getAndConditionRule() {
		return getAndConditionAccess().getRule();
	}
	
	//Atomic returns Expression:
	//    {MyNumber} value = INT |
	//    {VarRef} value = [Property] |
	//    {Parenthesis} value = Parenthesis
	//;
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}
	
	//Parenthesis returns Expression:
	//    "(" Exp ")"
	//;
	public ParenthesisElements getParenthesisAccess() {
		return pParenthesis;
	}
	
	public ParserRule getParenthesisRule() {
		return getParenthesisAccess().getRule();
	}
	
	//Type:
	//    name=("bool" | "integer" | "double" | "string")
	//;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//PropertyType:
	//    name=("private" | "public")
	//;
	public PropertyTypeElements getPropertyTypeAccess() {
		return pPropertyType;
	}
	
	public ParserRule getPropertyTypeRule() {
		return getPropertyTypeAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
