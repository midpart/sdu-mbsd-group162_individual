/**
 * generated by Xtext 2.37.0
 */
package org.xtext.example.smarthome.generator;

import com.google.common.collect.Iterables;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.eclipse.xtext.xbase.lib.XbaseGenerated;
import org.xtext.example.smarthome.smartHome.AND;
import org.xtext.example.smarthome.smartHome.Action;
import org.xtext.example.smarthome.smartHome.Controller;
import org.xtext.example.smarthome.smartHome.Device;
import org.xtext.example.smarthome.smartHome.DeviceInheritanceDetails;
import org.xtext.example.smarthome.smartHome.Expression;
import org.xtext.example.smarthome.smartHome.GT;
import org.xtext.example.smarthome.smartHome.LT;
import org.xtext.example.smarthome.smartHome.MyNumber;
import org.xtext.example.smarthome.smartHome.Parenthesis;
import org.xtext.example.smarthome.smartHome.Property;
import org.xtext.example.smarthome.smartHome.Room;
import org.xtext.example.smarthome.smartHome.RoomInheritanceDetails;
import org.xtext.example.smarthome.smartHome.VarRef;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class SmartHomeGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final StringConcatenation sc = new StringConcatenation();
    Iterable<Room> _filter = Iterables.<Room>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Room.class);
    for (final Room e : _filter) {
      {
        sc.append(this.compile(e));
        sc.newLine();
      }
    }
    fsa.generateFile("main.py", sc);
  }

  public CharSequence compile(final Room room) {
    CharSequence _xblockexpression = null;
    {
      final Room parentRoom = this.getRoomParent(room);
      List<Property> _xifexpression = null;
      if ((parentRoom != null)) {
        _xifexpression = parentRoom.getProperties();
      } else {
        _xifexpression = CollectionLiterals.<Property>newArrayList();
      }
      final List<Property> parentRoomProperties = _xifexpression;
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("class ");
      String _firstUpper = StringExtensions.toFirstUpper(room.getName());
      _builder.append(_firstUpper);
      {
        if ((parentRoom != null)) {
          _builder.append("(");
          String _name = parentRoom.getName();
          _builder.append(_name);
          _builder.append(")");
        }
      }
      _builder.append(":");
      _builder.newLineIfNotEmpty();
      _builder.append("    ");
      {
        if ((((room.getProperties().size() == 0) && (room.getDevices().size() == 0)) && (parentRoomProperties.size() == 0))) {
          _builder.append("pass");
          _builder.newLineIfNotEmpty();
          _builder.append("    ");
        } else {
          _builder.append("def __init__(self, ");
          {
            int _size = parentRoomProperties.size();
            boolean _greaterThan = (_size > 0);
            if (_greaterThan) {
              String _printPropertiesName = this.printPropertiesName(parentRoomProperties);
              _builder.append(_printPropertiesName, "    ");
              {
                int _size_1 = room.getProperties().size();
                boolean _greaterThan_1 = (_size_1 > 0);
                if (_greaterThan_1) {
                  _builder.append(", ");
                }
              }
            }
          }
          String _printPropertiesName_1 = this.printPropertiesName(room.getProperties());
          _builder.append(_printPropertiesName_1, "    ");
          _builder.append("):");
          _builder.newLineIfNotEmpty();
          _builder.append("    ");
          _builder.append("    ");
          {
            int _size_2 = parentRoomProperties.size();
            boolean _greaterThan_2 = (_size_2 > 0);
            if (_greaterThan_2) {
              _builder.append("super().__init__(");
              String _printPropertiesName_2 = this.printPropertiesName(parentRoomProperties);
              _builder.append(_printPropertiesName_2, "        ");
              _builder.append(")");
            }
          }
          _builder.newLineIfNotEmpty();
          _builder.append("    ");
          _builder.append("    ");
          String _initializationProperties = this.initializationProperties(room.getProperties());
          _builder.append(_initializationProperties, "        ");
          _builder.append("\t        ");
          _builder.newLineIfNotEmpty();
          _builder.append("    ");
          _builder.newLine();
          _builder.append("    ");
          String _printGetSetPrivateProperties = this.printGetSetPrivateProperties(room.getProperties());
          _builder.append(_printGetSetPrivateProperties, "    ");
          _builder.newLineIfNotEmpty();
          _builder.append("    ");
          _builder.append("   ");
          _builder.newLine();
          {
            EList<Device> _devices = room.getDevices();
            for(final Device dev : _devices) {
              _builder.append("\t\t    ");
              final Device parentDevice = this.getDevideParent(dev);
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t    ");
              List<Property> _xifexpression_1 = null;
              if ((parentDevice != null)) {
                _xifexpression_1 = parentDevice.getProperties();
              } else {
                _xifexpression_1 = CollectionLiterals.<Property>newArrayList();
              }
              final List<Property> parentDeviceProperties = _xifexpression_1;
              _builder.newLineIfNotEmpty();
              _builder.append("    ");
              _builder.append("class ");
              String _firstUpper_1 = StringExtensions.toFirstUpper(dev.getName());
              _builder.append(_firstUpper_1, "    ");
              {
                if ((parentDevice != null)) {
                  _builder.append("(");
                  String _name_1 = parentDevice.getName();
                  _builder.append(_name_1, "    ");
                  _builder.append(")");
                }
              }
              _builder.append(":");
              _builder.newLineIfNotEmpty();
              _builder.append("    ");
              _builder.append("    ");
              {
                if ((((dev.getProperties().size() == 0) && (dev.getActions().size() == 0)) && (parentDeviceProperties.size() == 0))) {
                  _builder.append("pass");
                  _builder.newLineIfNotEmpty();
                  _builder.append("    ");
                  _builder.append("    ");
                } else {
                  _builder.append("def __init__(self, ");
                  {
                    int _size_3 = parentDeviceProperties.size();
                    boolean _greaterThan_3 = (_size_3 > 0);
                    if (_greaterThan_3) {
                      String _printPropertiesName_3 = this.printPropertiesName(parentDeviceProperties);
                      _builder.append(_printPropertiesName_3, "        ");
                      {
                        int _size_4 = dev.getProperties().size();
                        boolean _greaterThan_4 = (_size_4 > 0);
                        if (_greaterThan_4) {
                          _builder.append(", ");
                        }
                      }
                    }
                  }
                  String _printPropertiesName_4 = this.printPropertiesName(dev.getProperties());
                  _builder.append(_printPropertiesName_4, "        ");
                  _builder.append("):");
                  _builder.newLineIfNotEmpty();
                  _builder.append("    ");
                  _builder.append("    ");
                  _builder.append("    ");
                  {
                    if (((parentDeviceProperties.size() > 0) && (this.propertiesHasExpression(parentDeviceProperties, dev.getExp()) == false))) {
                      _builder.append("super().__init__(");
                      String _printPropertiesName_5 = this.printPropertiesName(parentDeviceProperties);
                      _builder.append(_printPropertiesName_5, "            ");
                      _builder.append(")");
                    }
                  }
                  _builder.newLineIfNotEmpty();
                  {
                    if (((parentDeviceProperties.size() > 0) && (this.propertiesHasExpression(parentDeviceProperties, dev.getExp()) == true))) {
                      _builder.append("    ");
                      _builder.append("    ");
                      _builder.append("    ");
                      _builder.append("if(");
                      String _propertyConstraintForSuperClass = this.getPropertyConstraintForSuperClass(parentDeviceProperties, dev.getExp());
                      _builder.append(_propertyConstraintForSuperClass, "            ");
                      _builder.append("):");
                      _builder.newLineIfNotEmpty();
                      _builder.append("    ");
                      _builder.append("    ");
                      _builder.append("    ");
                      _builder.append("    ");
                      _builder.append("super().__init__(");
                      String _printPropertiesName_6 = this.printPropertiesName(parentDeviceProperties);
                      _builder.append(_printPropertiesName_6, "                ");
                      _builder.append(")");
                      _builder.newLineIfNotEmpty();
                      _builder.append("    ");
                      _builder.append("    ");
                      _builder.append("    ");
                      _builder.append("else:");
                      _builder.newLine();
                      _builder.append("    ");
                      _builder.append("    ");
                      _builder.append("    ");
                      _builder.append("    ");
                      _builder.append("raise ValueError(\"Invalid value for parent class properties\")");
                      _builder.newLine();
                      _builder.append("    ");
                      _builder.append("    ");
                      _builder.append("    ");
                      _builder.append("super().__init__(");
                      String _printPropertiesName_7 = this.printPropertiesName(parentDeviceProperties);
                      _builder.append(_printPropertiesName_7, "            ");
                      _builder.append(")");
                    }
                  }
                  _builder.newLineIfNotEmpty();
                  {
                    EList<Property> _properties = dev.getProperties();
                    for(final Property dev_pro : _properties) {
                      {
                        if (((dev.getExp().size() == 0) || (Boolean.valueOf(this.hasPropertyConstraint(dev.getExp(), dev_pro.getName())) == Boolean.valueOf(false)))) {
                          _builder.append("    ");
                          _builder.append("    ");
                          _builder.append("    ");
                          _builder.append("self.");
                          {
                            if (((dev_pro.getPrType() != null) && Objects.equals(dev_pro.getPrType().getName(), "private"))) {
                              _builder.append("__");
                            } else {
                            }
                          }
                          String _name_2 = dev_pro.getName();
                          _builder.append(_name_2, "            ");
                          _builder.append(" = ");
                          String _name_3 = dev_pro.getName();
                          _builder.append(_name_3, "            ");
                          _builder.newLineIfNotEmpty();
                        } else {
                          _builder.append("    ");
                          _builder.append("    ");
                          _builder.append("    ");
                          _builder.append("if ");
                          String _complieExpByDispatch = this.complieExpByDispatch(this.getPropertyConstraint(dev.getExp(), dev_pro.getName()));
                          _builder.append(_complieExpByDispatch, "            ");
                          _builder.append(":");
                          _builder.newLineIfNotEmpty();
                          _builder.append("    ");
                          _builder.append("    ");
                          _builder.append("    ");
                          _builder.append("    ");
                          _builder.append("self.");
                          {
                            if (((dev_pro.getPrType() != null) && Objects.equals(dev_pro.getPrType().getName(), "private"))) {
                              _builder.append("__");
                            } else {
                            }
                          }
                          String _name_4 = dev_pro.getName();
                          _builder.append(_name_4, "                ");
                          _builder.append(" = ");
                          String _name_5 = dev_pro.getName();
                          _builder.append(_name_5, "                ");
                          _builder.newLineIfNotEmpty();
                          _builder.append("    ");
                          _builder.append("    ");
                          _builder.append("    ");
                          _builder.append("else:");
                          _builder.newLine();
                          _builder.append("    ");
                          _builder.append("    ");
                          _builder.append("    ");
                          _builder.append("     ");
                          _builder.append("raise ValueError(\"Invalid value\")");
                          _builder.newLine();
                        }
                      }
                    }
                  }
                  _builder.append("        ");
                  String _printGetSetPrivateProperties_1 = this.printGetSetPrivateProperties(dev.getProperties());
                  _builder.append(_printGetSetPrivateProperties_1, "        ");
                  _builder.newLineIfNotEmpty();
                }
              }
              {
                EList<Action> _actions = dev.getActions();
                for(final Action action : _actions) {
                  _builder.append("    ");
                  _builder.append("    ");
                  _builder.append("def ");
                  String _name_6 = action.getName();
                  _builder.append(_name_6, "        ");
                  _builder.append("(self):");
                  _builder.newLineIfNotEmpty();
                  _builder.append("    ");
                  _builder.append("    ");
                  _builder.append("    ");
                  _builder.append("print(\"Start ");
                  String _name_7 = action.getName();
                  _builder.append(_name_7, "            ");
                  _builder.append("!\")");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
        }
      }
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }

  public String printGetSetPrivateProperties(final List<Property> properties) {
    StringConcatenation _builder = new StringConcatenation();
    {
      final Function1<Property, Boolean> _function = (Property t) -> {
        return Boolean.valueOf(((t.getPrType() != null) && Objects.equals(t.getPrType().getName(), "private")));
      };
      Iterable<Property> _filter = IterableExtensions.<Property>filter(properties, _function);
      for(final Property pro : _filter) {
        _builder.newLineIfNotEmpty();
        _builder.append("# For get private property");
        _builder.newLine();
        _builder.append("def get_");
        String _name = pro.getName();
        _builder.append(_name);
        _builder.append("(self):");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("return self.__");
        String _name_1 = pro.getName();
        _builder.append(_name_1, "    ");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("# For set private property");
        _builder.newLine();
        _builder.append("def set_");
        String _name_2 = pro.getName();
        _builder.append(_name_2);
        _builder.append("(self, ");
        String _name_3 = pro.getName();
        _builder.append(_name_3);
        _builder.append("):");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("self.__");
        String _name_4 = pro.getName();
        _builder.append(_name_4, "    ");
        _builder.append(" = ");
        String _name_5 = pro.getName();
        _builder.append(_name_5, "    ");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }

  public String printPropertiesName(final List<Property> properties) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _hasElements = false;
      for(final Property pro : properties) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(", ", "");
        }
        String _name = pro.getName();
        _builder.append(_name);
      }
    }
    return _builder.toString();
  }

  public String initializationProperties(final List<Property> properties) {
    StringConcatenation _builder = new StringConcatenation();
    {
      for(final Property pro : properties) {
        _builder.newLineIfNotEmpty();
        _builder.append("self.");
        {
          if (((pro.getPrType() != null) && Objects.equals(pro.getPrType().getName(), "private"))) {
            _builder.append("__");
          } else {
          }
        }
        String _name = pro.getName();
        _builder.append(_name);
        _builder.append(" = ");
        String _name_1 = pro.getName();
        _builder.append(_name_1);
        _builder.newLineIfNotEmpty();
        _builder.append("        ");
      }
    }
    return _builder.toString();
  }

  public boolean hasPropertyConstraint(final EList<Expression> expList, final String propertyName) {
    if (((expList == null) || expList.isEmpty())) {
      return false;
    }
    for (final Expression exp : expList) {
      boolean _checkExpressionByDispatch = this.checkExpressionByDispatch(exp, propertyName);
      if (_checkExpressionByDispatch) {
        return true;
      }
    }
    return false;
  }

  public Expression getPropertyConstraint(final EList<Expression> expList, final String propertyName) {
    if (((expList == null) || expList.isEmpty())) {
      return null;
    }
    for (final Expression exp : expList) {
      boolean _checkExpressionByDispatch = this.checkExpressionByDispatch(exp, propertyName);
      if (_checkExpressionByDispatch) {
        return exp;
      }
    }
    return null;
  }

  public boolean propertiesHasExpression(final List<Property> properties, final EList<Expression> expList) {
    boolean hasExpression = false;
    final Function1<Property, Boolean> _function = (Property t) -> {
      boolean _hasPropertyConstraint = this.hasPropertyConstraint(expList, t.getName());
      return Boolean.valueOf((Boolean.valueOf(_hasPropertyConstraint) == Boolean.valueOf(true)));
    };
    int _size = IterableExtensions.size(IterableExtensions.<Property>filter(properties, _function));
    boolean _greaterThan = (_size > 0);
    hasExpression = _greaterThan;
    return hasExpression;
  }

  public String getPropertyConstraintForSuperClass(final List<Property> properties, final EList<Expression> expList) {
    final ArrayList<Object> arrayList = CollectionLiterals.<Object>newArrayList();
    for (final Property pro : properties) {
      {
        final Expression tempConstraint = this.getPropertyConstraint(expList, pro.getName());
        if ((tempConstraint != null)) {
          arrayList.add(this.complieExpByDispatch(tempConstraint));
        }
      }
    }
    return IterableExtensions.join(arrayList, " and ");
  }

  protected boolean _checkExpressionByDispatch(final GT ex, final String propertyName) {
    return this.checkExpressionByDispatch(ex.getLeft(), propertyName);
  }

  protected boolean _checkExpressionByDispatch(final LT ex, final String propertyName) {
    return this.checkExpressionByDispatch(ex.getLeft(), propertyName);
  }

  protected boolean _checkExpressionByDispatch(final AND ex, final String propertyName) {
    return this.checkExpressionByDispatch(ex.getLeft(), propertyName);
  }

  protected boolean _checkExpressionByDispatch(final VarRef ex, final String propertyName) {
    return ex.getValue().getName().equals(propertyName);
  }

  protected boolean _checkExpressionByDispatch(final Number ex, final String propertyName) {
    return false;
  }

  protected boolean _checkExpressionByDispatch(final Expression ex, final String propertyName) {
    return false;
  }

  protected String _complieExpByDispatch(final GT ex) {
    String _complieExpByDispatch = this.complieExpByDispatch(ex.getLeft());
    String _plus = (_complieExpByDispatch + " > ");
    String _complieExpByDispatch_1 = this.complieExpByDispatch(ex.getRight());
    return (_plus + _complieExpByDispatch_1);
  }

  protected String _complieExpByDispatch(final LT ex) {
    String _complieExpByDispatch = this.complieExpByDispatch(ex.getLeft());
    String _plus = (_complieExpByDispatch + " < ");
    String _complieExpByDispatch_1 = this.complieExpByDispatch(ex.getRight());
    return (_plus + _complieExpByDispatch_1);
  }

  protected String _complieExpByDispatch(final AND ex) {
    String _complieExpByDispatch = this.complieExpByDispatch(ex.getLeft());
    String _plus = (_complieExpByDispatch + " and ");
    String _complieExpByDispatch_1 = this.complieExpByDispatch(ex.getRight());
    return (_plus + _complieExpByDispatch_1);
  }

  protected String _complieExpByDispatch(final Parenthesis ex) {
    String _complieExpByDispatch = this.complieExpByDispatch(ex.getValue());
    String _plus = ("(" + _complieExpByDispatch);
    return (_plus + ")");
  }

  protected String _complieExpByDispatch(final MyNumber ex) {
    return Integer.valueOf(ex.getValue()).toString();
  }

  protected String _complieExpByDispatch(final VarRef ex) {
    return ex.getValue().getName();
  }

  public Room getRoomParent(final Room room) {
    Controller root = EcoreUtil2.<Controller>getContainerOfType(room, Controller.class);
    if ((((root == null) || (root.getRoomInheritance() == null)) || (root.getRoomInheritance().getInheritances() == null))) {
      return null;
    }
    final Function1<RoomInheritanceDetails, Boolean> _function = (RoomInheritanceDetails it) -> {
      Room _roomChild = it.getRoomChild();
      return Boolean.valueOf(Objects.equals(_roomChild, room));
    };
    RoomInheritanceDetails inheritance = IterableExtensions.<RoomInheritanceDetails>findFirst(Iterables.<RoomInheritanceDetails>filter(root.getRoomInheritance().getInheritances(), RoomInheritanceDetails.class), _function);
    if ((inheritance != null)) {
      return inheritance.getRoomParent();
    }
    return null;
  }

  public Device getDevideParent(final Device device) {
    Room room = EcoreUtil2.<Room>getContainerOfType(device, Room.class);
    if ((((room == null) || (room.getDeviceInheritance() == null)) || (room.getDeviceInheritance().getInheritances() == null))) {
      return null;
    }
    final Function1<DeviceInheritanceDetails, Boolean> _function = (DeviceInheritanceDetails it) -> {
      Device _deviceChild = it.getDeviceChild();
      return Boolean.valueOf(Objects.equals(_deviceChild, device));
    };
    DeviceInheritanceDetails inheritance = IterableExtensions.<DeviceInheritanceDetails>findFirst(Iterables.<DeviceInheritanceDetails>filter(room.getDeviceInheritance().getInheritances(), DeviceInheritanceDetails.class), _function);
    if ((inheritance != null)) {
      return inheritance.getDeviceParent();
    }
    return null;
  }

  @XbaseGenerated
  public boolean checkExpressionByDispatch(final Object ex, final String propertyName) {
    if (ex instanceof AND) {
      return _checkExpressionByDispatch((AND)ex, propertyName);
    } else if (ex instanceof GT) {
      return _checkExpressionByDispatch((GT)ex, propertyName);
    } else if (ex instanceof LT) {
      return _checkExpressionByDispatch((LT)ex, propertyName);
    } else if (ex instanceof VarRef) {
      return _checkExpressionByDispatch((VarRef)ex, propertyName);
    } else if (ex instanceof Expression) {
      return _checkExpressionByDispatch((Expression)ex, propertyName);
    } else if (ex instanceof Number) {
      return _checkExpressionByDispatch((Number)ex, propertyName);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(ex, propertyName).toString());
    }
  }

  @XbaseGenerated
  public String complieExpByDispatch(final Expression ex) {
    if (ex instanceof AND) {
      return _complieExpByDispatch((AND)ex);
    } else if (ex instanceof GT) {
      return _complieExpByDispatch((GT)ex);
    } else if (ex instanceof LT) {
      return _complieExpByDispatch((LT)ex);
    } else if (ex instanceof MyNumber) {
      return _complieExpByDispatch((MyNumber)ex);
    } else if (ex instanceof Parenthesis) {
      return _complieExpByDispatch((Parenthesis)ex);
    } else if (ex instanceof VarRef) {
      return _complieExpByDispatch((VarRef)ex);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(ex).toString());
    }
  }
}
