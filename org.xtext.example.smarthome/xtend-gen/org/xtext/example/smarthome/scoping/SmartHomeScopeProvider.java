/**
 * generated by Xtext 2.38.0
 */
package org.xtext.example.smarthome.scoping;

import com.google.common.collect.Iterables;
import java.util.Objects;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.xtext.example.smarthome.smartHome.Device;
import org.xtext.example.smarthome.smartHome.DeviceInheritanceDetails;
import org.xtext.example.smarthome.smartHome.Property;
import org.xtext.example.smarthome.smartHome.Room;
import org.xtext.example.smarthome.smartHome.VarRef;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class SmartHomeScopeProvider extends AbstractSmartHomeScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    IScope _xblockexpression = null;
    {
      boolean _matched = false;
      if (context instanceof VarRef) {
        _matched=true;
        return this.varScope(((VarRef)context));
      }
      _xblockexpression = super.getScope(context, reference);
    }
    return _xblockexpression;
  }

  public IScope varScope(final VarRef ref) {
    Device entity = EcoreUtil2.<Device>getContainerOfType(ref, Device.class);
    final Device parent = this.getDeviceParent(entity);
    IScope nextScope = IScope.NULLSCOPE;
    if ((parent != null)) {
      final Function1<Property, Boolean> _function = (Property t) -> {
        return Boolean.valueOf(((t.getPrType() == null) || (!Objects.equals(t.getPrType().getName(), "private"))));
      };
      nextScope = Scopes.scopeFor(IterableExtensions.<Property>filter(parent.getProperties(), _function));
    }
    return Scopes.scopeFor(entity.getProperties(), nextScope);
  }

  public Device getDeviceParent(final Device device) {
    Room room = EcoreUtil2.<Room>getContainerOfType(device, Room.class);
    if ((((room == null) || (room.getDeviceInheritance() == null)) || (room.getDeviceInheritance().getInheritances() == null))) {
      return null;
    }
    final Function1<DeviceInheritanceDetails, Boolean> _function = (DeviceInheritanceDetails it) -> {
      Device _deviceChild = it.getDeviceChild();
      return Boolean.valueOf(Objects.equals(_deviceChild, device));
    };
    DeviceInheritanceDetails inheritance = IterableExtensions.<DeviceInheritanceDetails>findFirst(Iterables.<DeviceInheritanceDetails>filter(room.getDeviceInheritance().getInheritances(), DeviceInheritanceDetails.class), _function);
    if ((inheritance != null)) {
      return inheritance.getDeviceParent();
    }
    return null;
  }
}
