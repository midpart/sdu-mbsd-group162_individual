/*
 * generated by Xtext 2.38.0
 */
package org.xtext.example.smarthome.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.smarthome.ide.contentassist.antlr.internal.InternalSmartHomeParser;
import org.xtext.example.smarthome.services.SmartHomeGrammarAccess;

public class SmartHomeParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SmartHomeGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SmartHomeGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getAndConditionAccess().getAlternatives_1(), "rule__AndCondition__Alternatives_1");
			builder.put(grammarAccess.getAtomicAccess().getAlternatives(), "rule__Atomic__Alternatives");
			builder.put(grammarAccess.getTypeAccess().getNameAlternatives_0(), "rule__Type__NameAlternatives_0");
			builder.put(grammarAccess.getPropertyTypeAccess().getNameAlternatives_0(), "rule__PropertyType__NameAlternatives_0");
			builder.put(grammarAccess.getControllerAccess().getGroup(), "rule__Controller__Group__0");
			builder.put(grammarAccess.getRoomAccess().getGroup(), "rule__Room__Group__0");
			builder.put(grammarAccess.getRoomInheritanceAccess().getGroup(), "rule__RoomInheritance__Group__0");
			builder.put(grammarAccess.getRoomInheritanceDetailsAccess().getGroup(), "rule__RoomInheritanceDetails__Group__0");
			builder.put(grammarAccess.getDeviceInheritanceAccess().getGroup(), "rule__DeviceInheritance__Group__0");
			builder.put(grammarAccess.getDeviceInheritanceDetailsAccess().getGroup(), "rule__DeviceInheritanceDetails__Group__0");
			builder.put(grammarAccess.getDeviceAccess().getGroup(), "rule__Device__Group__0");
			builder.put(grammarAccess.getActionAccess().getGroup(), "rule__Action__Group__0");
			builder.put(grammarAccess.getPropertyAccess().getGroup(), "rule__Property__Group__0");
			builder.put(grammarAccess.getDevPropertyAccess().getGroup(), "rule__DevProperty__Group__0");
			builder.put(grammarAccess.getBooleanExpAccess().getGroup(), "rule__BooleanExp__Group__0");
			builder.put(grammarAccess.getBooleanExpAccess().getGroup_1(), "rule__BooleanExp__Group_1__0");
			builder.put(grammarAccess.getAndConditionAccess().getGroup(), "rule__AndCondition__Group__0");
			builder.put(grammarAccess.getAndConditionAccess().getGroup_1_0(), "rule__AndCondition__Group_1_0__0");
			builder.put(grammarAccess.getAndConditionAccess().getGroup_1_1(), "rule__AndCondition__Group_1_1__0");
			builder.put(grammarAccess.getAtomicAccess().getGroup_0(), "rule__Atomic__Group_0__0");
			builder.put(grammarAccess.getAtomicAccess().getGroup_1(), "rule__Atomic__Group_1__0");
			builder.put(grammarAccess.getAtomicAccess().getGroup_2(), "rule__Atomic__Group_2__0");
			builder.put(grammarAccess.getParenthesisAccess().getGroup(), "rule__Parenthesis__Group__0");
			builder.put(grammarAccess.getControllerAccess().getNameAssignment_1(), "rule__Controller__NameAssignment_1");
			builder.put(grammarAccess.getControllerAccess().getRoomsAssignment_3(), "rule__Controller__RoomsAssignment_3");
			builder.put(grammarAccess.getControllerAccess().getRoomInheritanceAssignment_4(), "rule__Controller__RoomInheritanceAssignment_4");
			builder.put(grammarAccess.getRoomAccess().getNameAssignment_1(), "rule__Room__NameAssignment_1");
			builder.put(grammarAccess.getRoomAccess().getPropertiesAssignment_4(), "rule__Room__PropertiesAssignment_4");
			builder.put(grammarAccess.getRoomAccess().getDevicesAssignment_5(), "rule__Room__DevicesAssignment_5");
			builder.put(grammarAccess.getRoomAccess().getDeviceInheritanceAssignment_6(), "rule__Room__DeviceInheritanceAssignment_6");
			builder.put(grammarAccess.getRoomInheritanceAccess().getInheritancesAssignment_2(), "rule__RoomInheritance__InheritancesAssignment_2");
			builder.put(grammarAccess.getRoomInheritanceDetailsAccess().getRoomChildAssignment_0(), "rule__RoomInheritanceDetails__RoomChildAssignment_0");
			builder.put(grammarAccess.getRoomInheritanceDetailsAccess().getRoomParentAssignment_3(), "rule__RoomInheritanceDetails__RoomParentAssignment_3");
			builder.put(grammarAccess.getDeviceInheritanceAccess().getInheritancesAssignment_2(), "rule__DeviceInheritance__InheritancesAssignment_2");
			builder.put(grammarAccess.getDeviceInheritanceDetailsAccess().getDeviceChildAssignment_0(), "rule__DeviceInheritanceDetails__DeviceChildAssignment_0");
			builder.put(grammarAccess.getDeviceInheritanceDetailsAccess().getDeviceParentAssignment_3(), "rule__DeviceInheritanceDetails__DeviceParentAssignment_3");
			builder.put(grammarAccess.getDeviceAccess().getNameAssignment_1(), "rule__Device__NameAssignment_1");
			builder.put(grammarAccess.getDeviceAccess().getPropertiesAssignment_4(), "rule__Device__PropertiesAssignment_4");
			builder.put(grammarAccess.getDeviceAccess().getActionsAssignment_6(), "rule__Device__ActionsAssignment_6");
			builder.put(grammarAccess.getDeviceAccess().getExpAssignment_8(), "rule__Device__ExpAssignment_8");
			builder.put(grammarAccess.getActionAccess().getNameAssignment_1(), "rule__Action__NameAssignment_1");
			builder.put(grammarAccess.getPropertyAccess().getPrTypeAssignment_0(), "rule__Property__PrTypeAssignment_0");
			builder.put(grammarAccess.getPropertyAccess().getNameAssignment_1(), "rule__Property__NameAssignment_1");
			builder.put(grammarAccess.getPropertyAccess().getTypeAssignment_3(), "rule__Property__TypeAssignment_3");
			builder.put(grammarAccess.getDevPropertyAccess().getNameAssignment_0(), "rule__DevProperty__NameAssignment_0");
			builder.put(grammarAccess.getDevPropertyAccess().getTypeAssignment_2(), "rule__DevProperty__TypeAssignment_2");
			builder.put(grammarAccess.getBooleanExpAccess().getRightAssignment_1_2(), "rule__BooleanExp__RightAssignment_1_2");
			builder.put(grammarAccess.getAndConditionAccess().getRightAssignment_1_0_2(), "rule__AndCondition__RightAssignment_1_0_2");
			builder.put(grammarAccess.getAndConditionAccess().getRightAssignment_1_1_2(), "rule__AndCondition__RightAssignment_1_1_2");
			builder.put(grammarAccess.getAtomicAccess().getValueAssignment_0_1(), "rule__Atomic__ValueAssignment_0_1");
			builder.put(grammarAccess.getAtomicAccess().getValueAssignment_1_1(), "rule__Atomic__ValueAssignment_1_1");
			builder.put(grammarAccess.getAtomicAccess().getValueAssignment_2_1(), "rule__Atomic__ValueAssignment_2_1");
			builder.put(grammarAccess.getTypeAccess().getNameAssignment(), "rule__Type__NameAssignment");
			builder.put(grammarAccess.getPropertyTypeAccess().getNameAssignment(), "rule__PropertyType__NameAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SmartHomeGrammarAccess grammarAccess;

	@Override
	protected InternalSmartHomeParser createParser() {
		InternalSmartHomeParser result = new InternalSmartHomeParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SmartHomeGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SmartHomeGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
