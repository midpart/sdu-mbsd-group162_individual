/*
 * generated by Xtext 2.38.0
 */
package org.xtext.example.smarthome.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.xtext.example.smarthome.smartHome.VarRef
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.EcoreUtil2
import org.xtext.example.smarthome.smartHome.Device
import org.xtext.example.smarthome.smartHome.Room
import org.xtext.example.smarthome.smartHome.DeviceInheritanceDetails
import org.eclipse.xtext.scoping.Scopes

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class SmartHomeScopeProvider extends AbstractSmartHomeScopeProvider {

	override getScope(EObject context, EReference reference) {
		
		switch(context) {
           VarRef: return context.varScope
        }
                
		super.getScope(context, reference)
	}
		
	def IScope varScope(VarRef ref) {
		var entity = EcoreUtil2.getContainerOfType(ref, Device)
		val parent = entity.getDeviceParent()
		var nextScope = IScope.NULLSCOPE
		if (parent !== null)
			nextScope = Scopes.scopeFor(parent.properties)
		return Scopes.scopeFor(entity.properties, nextScope)
	}

//	def Entity parent(Entity entity) {
//		val root = EcoreUtil2.getContainerOfType(entity, SystemRoot)
//		if(root.relation === null) return null
//		val inheritance = root.relation.relations.filter(Inheritance).findFirst[origin === entity]
//		if (inheritance !== null)
//			return inheritance.target
//		return null
//	}
	
	def Device getDeviceParent(Device device){
		var room = EcoreUtil2.getContainerOfType(device, Room)
		if (room === null || room.deviceInheritance === null || room.deviceInheritance.inheritances === null)
        return null
		
		var inheritance = room.deviceInheritance.inheritances.filter(DeviceInheritanceDetails).findFirst[deviceChild == device]
		if(inheritance !== null)
			return inheritance.deviceParent
		return null
	}	

}
