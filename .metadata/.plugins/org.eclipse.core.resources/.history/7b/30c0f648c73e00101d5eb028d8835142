/*
 * generated by Xtext 2.38.0
 */
package org.xtext.example.smarthome.validation

import org.eclipse.xtext.validation.Check
import org.xtext.example.smarthome.smartHome.Room
import org.xtext.example.smarthome.smartHome.Property
import org.xtext.example.smarthome.smartHome.SmartHomePackage
import org.eclipse.xtext.EcoreUtil2
import org.xtext.example.smarthome.smartHome.Controller
import org.xtext.example.smarthome.smartHome.Device
import org.xtext.example.smarthome.smartHome.RoomInheritanceDetails
import org.xtext.example.smarthome.smartHome.DeviceInheritanceDetails

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class SmartHomeValidator extends AbstractSmartHomeValidator {
	
	public static val INVALID_NAME = 'invalidName'
	public static val CIRCULAR_INHERITANCE = 'inheritance'
	public static val DUPLICATE_CLASS_NAME = 'duplicate class name'
	public static val SINGLE_INHERITANCE = 'inheritance'
	public static val PROPERTY_ALREADY_DECLARE = 'property already declare'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					SmartHomePackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}

	@Check
	def checkControllerNameStartsWithCapital(Controller controller){
		if(Character.isUpperCase(controller.name.charAt(0)) == false)
			error('Controller name should start with a capital letter'
				, SmartHomePackage.Literals.CONTROLLER__NAME
				, INVALID_NAME
			)
	}
 
	@Check
	def checkRoomNameStartsWithCapital(Room room){
		if(Character.isUpperCase(room.name.charAt(0)) == false)
			error('Room name should start with a capital letter', SmartHomePackage.Literals.ROOM__NAME, INVALID_NAME)
	}
	
	def checkDuplicateRoomName(Room room){
		var root = EcoreUtil2.getContainerOfType(room, Controller)
		if(root === null || root.rooms === null)
			return
		println(root.rooms)
		var duplicateName = root.rooms.filter[t | t.name === room.name].size > 1
		if(duplicateName == true){
			error('This room name already exists', SmartHomePackage.Literals.ROOM__NAME, DUPLICATE_CLASS_NAME)
		}
	}
	
	@Check
	def checkDuplicateDeviceName(Device device){
		var room = EcoreUtil2.getContainerOfType(device, Room)
		if(room === null || room.devices === null)
			return
		var duplicateName = room.devices.filter[t | t.name === device.name].size > 1
		if(duplicateName == true){
			error('This device name already exists in this'+ room.name, SmartHomePackage.Literals.DEVICE__NAME, DUPLICATE_CLASS_NAME)
		}
	}
	
	@Check
	def checkDeviceNameStartsWithCapital(Device device){
		if(Character.isUpperCase(device.name.charAt(0)) == false)
			error('Device name should start with a capital letter', SmartHomePackage.Literals.ROOM__NAME, INVALID_NAME)
	}
	
	@Check
	def checkPropertiesNameDuplicate(Property property){
		val container = property.eContainer
	    if (container !== null) {
	        // if container is Room:
	        if (container instanceof Room) {
	            val room = container as Room
				if (room !== null) {
			        val duplicates = room.properties
			            .filter[it !== property && it.name == property.name]
			
			        if (!duplicates.empty) {
			            error("Duplicate property name in the same room: " + property.name,
			                  SmartHomePackage.Literals.PROPERTY__NAME, PROPERTY_ALREADY_DECLARE )
			        }
			        
			        val parent = getRoomParent(room)
					if (parent !== null) {
					    val parentRoomOnlyProperties = parent.properties.filter[it.eContainer == parent]
					    val parentDuplicates = parentRoomOnlyProperties.filter[it !== property && it.name == property.name]		
					    if (!parentDuplicates.empty) {
					        error("Duplicate property name from parent room: " + property.name,
					              SmartHomePackage.Literals.PROPERTY__NAME, PROPERTY_ALREADY_DECLARE)
					    }
					}
			        
			    }
	            
	        }
	        
	        // if container is device
	        else if (container instanceof Device) {
	            val device = container as Device
				if (device !== null) {
			        val duplicates = device.properties
			            .filter[it !== property && it.name == property.name]
			
			        if (!duplicates.empty) {
			            error("Duplicate property name in the same device: " + property.name,
			                  SmartHomePackage.Literals.PROPERTY__NAME, PROPERTY_ALREADY_DECLARE )
			        }
			        
			        val parent = getDeviceParent(device)
					if (parent !== null) {
					    val parentOnlyProperties = parent.properties.filter[it.eContainer == parent]
					    val parentDuplicates = parentOnlyProperties.filter[it !== property && it.name == property.name]		
					    if (!parentDuplicates.empty) {
					        error("Duplicate property name from parent device: " + property.name,
					              SmartHomePackage.Literals.PROPERTY__NAME, PROPERTY_ALREADY_DECLARE)
					    }
					}
			    }
	            
	        }
	        
	    }
	}
	
	@Check
	def checkCircularInheritanceForRoom(RoomInheritanceDetails inheritanceDetails) {
	    val child = inheritanceDetails.roomChild
	    var parent = inheritanceDetails.roomParent
		var circuitBreak = 100
		val visited = newHashSet(child)
	    while (parent !== null) {
	        if (!visited.add(parent)) {
            // Already visited => cycle
	            error(
	                'Circular Inheritance Detected',
	                SmartHomePackage.Literals.ROOM_INHERITANCE_DETAILS__ROOM_CHILD,
	                CIRCULAR_INHERITANCE
	            )
	            return
	        }
	        parent = parent.getRoomParent()
	        circuitBreak--
	        
	        if(circuitBreak < 0){
	        	error(
		                'Circular Inheritance Detection check overflow',
		                SmartHomePackage.Literals.ROOM_INHERITANCE_DETAILS__ROOM_CHILD,
		                CIRCULAR_INHERITANCE
		            )
		            return
	        }
		        
	    }
	}
	
	@Check
	def checkOneClassInheritanceForRoom(RoomInheritanceDetails inheritanceDetails) {
	    val child = inheritanceDetails.roomChild
	    var root = EcoreUtil2.getContainerOfType(child, Controller)
	    if (root === null || root.roomInheritance === null || root.roomInheritance.inheritances === null)
        return
        
        var parentCount = root.roomInheritance.inheritances.filter(RoomInheritanceDetails).filter[t | t.roomChild == child].size > 1
        if(parentCount === true ){
        	error(
        		'You can only inheritance from on base class',
        		SmartHomePackage.Literals.ROOM_INHERITANCE_DETAILS__ROOM_CHILD,
        		SINGLE_INHERITANCE
        	)
        }
	}
	
	@Check
	def checkOneClassInheritanceForDevice(DeviceInheritanceDetails inheritanceDetails) {
	    val child = inheritanceDetails.deviceChild
	    var root = EcoreUtil2.getContainerOfType(child, Room)
	    if (root === null || root.deviceInheritance === null || root.deviceInheritance.inheritances === null)
        return
        
        var parentCount = root.deviceInheritance.inheritances.filter(DeviceInheritanceDetails).filter[t | t.deviceChild == child].size > 1
        if(parentCount === true ){
        	error(
        		'You can only inheritance from on base class',
        		SmartHomePackage.Literals.DEVICE_INHERITANCE_DETAILS__DEVICE_CHILD,
        		SINGLE_INHERITANCE
        	)
        }
	}
			
	@Check
	def checkCircularInheritanceForDevice(DeviceInheritanceDetails inheritanceDetails) {
	    val child = inheritanceDetails.deviceChild
	    var parent = inheritanceDetails.deviceParent
		var circuitBreak = 100
		val visited = newHashSet(child)
	
	    while (parent !== null) {
	         if (!visited.add(parent)) {
	            error(
	                'Circular Inheritance Detected',
	                SmartHomePackage.Literals.DEVICE_INHERITANCE_DETAILS__DEVICE_CHILD,
	                CIRCULAR_INHERITANCE
	            )
	            return
	        }
	        parent = parent.getDeviceParent()
	        
	        circuitBreak--
	        
	        if(circuitBreak < 0){
	        	error(
		                'Circular Inheritance Detection check overflow',
		                SmartHomePackage.Literals.DEVICE_INHERITANCE_DETAILS__DEVICE_CHILD,
		                CIRCULAR_INHERITANCE
		            )
		            return
	        }
	    }
	}
		
	def Room getRoomParent(Room room){
		var root = EcoreUtil2.getContainerOfType(room, Controller)
		if (root === null || root.roomInheritance === null || root.roomInheritance.inheritances === null)
        return null
		
		var inheritance = root.roomInheritance.inheritances.filter(RoomInheritanceDetails).findFirst[roomChild == room]
		if(inheritance !== null)
			return inheritance.roomParent
		return null
	}
		
	def Device getDeviceParent(Device device){
		var room = EcoreUtil2.getContainerOfType(device, Room)
		if (room === null || room.deviceInheritance === null || room.deviceInheritance.inheritances === null)
        return null
		
		var inheritance = room.deviceInheritance.inheritances.filter(DeviceInheritanceDetails).findFirst[deviceChild == device]
		if(inheritance !== null)
			return inheritance.deviceParent
		return null
	}	
} 
